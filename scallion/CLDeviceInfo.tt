<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#
	AddType("size_t", "ulong");
	AddType("cl_device_exec_capabilities", "DeviceExecCapabilitiesFlags");
	AddType("cl_device_mem_cache_type", "DeviceMemCacheType");
	AddType("char[]", "string");
	AddType("cl_ulong", "ulong");
	AddType("cl_uint", "uint");
	AddType("cl_bool", "bool");
	AddType("cl_device_fp_config","DeviceFpConfigFlags");
	AddType("cl_device_local_mem_type","DeviceLocalMemType");
	AddType("cl_device_type", "DeviceTypeFlags");
	AddType("cl_long","long");

	AddParm("CL_DEVICE_AVAILABLE", "cl_bool");
	AddParm("CL_DEVICE_COMPILER_AVAILABLE", "cl_bool");
	//AddParm("CL_DEVICE_DOUBLE_FP_CONFIG", "cl_device_fp_config", "cl_ulong");
	AddParm("CL_DEVICE_ENDIAN_LITTLE","cl_bool");
	AddParm("CL_DEVICE_ERROR_CORRECTION_SUPPORT","cl_bool");
	AddParm("CL_DEVICE_EXECUTION_CAPABILITIES","cl_device_exec_capabilities", "cl_long");
	AddParm("CL_DEVICE_EXTENSIONS","char[]");
	AddParm("CL_DEVICE_GLOBAL_MEM_CACHE_SIZE","cl_ulong");
	AddParm("CL_DEVICE_GLOBAL_MEM_CACHE_TYPE","cl_device_mem_cache_type", "cl_long");
	AddParm("CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE","cl_uint");
	AddParm("CL_DEVICE_GLOBAL_MEM_SIZE","cl_ulong");
	//AddParm("CL_DEVICE_HALF_FP_CONFIG", "cl_device_fp_config", "cl_ulong");
	AddParm("CL_DEVICE_IMAGE_SUPPORT", "cl_bool");
	AddParm("CL_DEVICE_IMAGE2D_MAX_HEIGHT","size_t");
	AddParm("CL_DEVICE_IMAGE2D_MAX_WIDTH","size_t");
	AddParm("CL_DEVICE_IMAGE3D_MAX_DEPTH","size_t");
	AddParm("CL_DEVICE_IMAGE3D_MAX_HEIGHT","size_t");
	AddParm("CL_DEVICE_IMAGE3D_MAX_WIDTH","size_t");
	AddParm("CL_DEVICE_LOCAL_MEM_SIZE","cl_ulong");
	AddParm("CL_DEVICE_LOCAL_MEM_TYPE","cl_device_local_mem_type", "cl_long");
	AddParm("CL_DEVICE_MAX_CLOCK_FREQUENCY", "cl_uint");
	AddParm("CL_DEVICE_MAX_COMPUTE_UNITS", "cl_uint");
	AddParm("CL_DEVICE_MAX_CONSTANT_ARGS", "cl_uint");
	AddParm("CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE", "cl_ulong");
	AddParm("CL_DEVICE_MAX_MEM_ALLOC_SIZE", "cl_ulong");
	AddParm("CL_DEVICE_MAX_PARAMETER_SIZE", "size_t");
	AddParm("CL_DEVICE_MAX_READ_IMAGE_ARGS", "cl_uint");
	AddParm("CL_DEVICE_MAX_SAMPLERS", "cl_uint");
	AddParm("CL_DEVICE_MAX_WORK_GROUP_SIZE", "size_t");
	AddParm("CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS", "cl_uint");
	//AddParm("CL_DEVICE_MAX_WORK_ITEM_SIZES", "size_t[]");
	AddParm("CL_DEVICE_MAX_WRITE_IMAGE_ARGS", "cl_uint");
	AddParm("CL_DEVICE_MEM_BASE_ADDR_ALIGN", "cl_uint");
	AddParm("CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE", "cl_uint");
	AddParm("CL_DEVICE_NAME", "char[]");
	//AddParm("CL_DEVICE_PLATFORM", "cl_platform_id");
	AddParm("CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR", "cl_uint");
	AddParm("CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT", "cl_uint");
	AddParm("CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT", "cl_uint");
	AddParm("CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG", "cl_uint");
	AddParm("CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT", "cl_uint");
	AddParm("CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE", "cl_uint");
	AddParm("CL_DEVICE_PROFILE", "char[]");
	AddParm("CL_DEVICE_PROFILING_TIMER_RESOLUTION", "size_t");
	//AddParm("CL_DEVICE_QUEUE_PROPERTIES", "cl_command_queue_properties");
	//AddParm("CL_DEVICE_SINGLE_FP_CONFIG", "cl_device_fp_config");
	AddParm("CL_DEVICE_TYPE", "cl_device_type", "cl_ulong");
	AddParm("CL_DEVICE_VENDOR", "char[]");
	AddParm("CL_DEVICE_VENDOR_ID", "cl_uint");
	AddParm("CL_DEVICE_VERSION", "char[]");
#>
using System;
using OpenTK.Compute.CL10;
using System.Text;
using System.Linq;
using System.Xml.Serialization;
namespace scallion
{
	public unsafe class CLDeviceInfo
	{
		public readonly IntPtr DeviceId;
		public readonly uint  AddressBits;
		public CLDeviceInfo(IntPtr deviceId)
		{
			DeviceId = deviceId;
			AddressBits = GetDeviceInfo_uint(DeviceInfo.DeviceAddressBits);
		}
		
		public static IntPtr[] GetDeviceIds()
		{
			return GetPlatformIds()
				.SelectMany(i=>GetDeviceIds(i, DeviceTypeFlags.DeviceTypeAll))
				.ToArray();
		}
		
		public static IntPtr[] GetDeviceIds(IntPtr platformId, DeviceTypeFlags deviceType)
        {
            //get numOfPlatforms
            uint num;
            CheckError(CL.GetDeviceIDs(platformId, deviceType, 0, (IntPtr*)NullPtr, &num));
            //get platforms
            IntPtr[] ids = new IntPtr[num];
            fixed (IntPtr* idsPtr = ids)
            {
                CheckError(CL.GetDeviceIDs(platformId, deviceType, num, idsPtr, (uint*)NullPtr));
            }
            return ids;
        }
		
		public static IntPtr[] GetPlatformIds()
        {
            //get numOfPlatforms
            uint numOfPlatforms;
            CheckError(CL.GetPlatformIDs(0, (IntPtr*)NullPtr, &numOfPlatforms));
            //get platforms
            IntPtr[] platformsIds = new IntPtr[numOfPlatforms];
            fixed(IntPtr* platformsIdsPtr = platformsIds)
            {
                CheckError(CL.GetPlatformIDs(numOfPlatforms, platformsIdsPtr, (uint*)NullPtr));
            }
            return platformsIds;
        }
		
<#foreach(var parm in parms){#>
		public <#=GetTypeName(parm.Item2)#> <#=GetPropName(parm.Item1)#>
		{
			get { return (<#=GetTypeName(parm.Item2)#>)GetDeviceInfo_<#=GetTypeName(parm.Item3)#>(DeviceInfo.Device<#=GetPropName(parm.Item1)#>);}
		}
		
<#}#>
		private uint GetDeviceInfo_uint(DeviceInfo paramName)
		{
			uint ret = default(uint);
			CheckError(CL.GetDeviceInfo<uint>(DeviceId, paramName, IntSizePtr, ref ret, (IntPtr*)NullPtr));
			return ret;
		}
		private long GetDeviceInfo_long(DeviceInfo paramName)
		{
			long ret = default(long);
			CheckError(CL.GetDeviceInfo<long>(DeviceId, paramName, LongSizePtr, ref ret, (IntPtr*)NullPtr));
			return ret;
		}
		private ulong GetDeviceInfo_ulong(DeviceInfo paramName)
		{
			ulong ret = default(ulong);
			CheckError(CL.GetDeviceInfo<ulong>(DeviceId, paramName, LongSizePtr, ref ret, (IntPtr*)NullPtr));
			return ret;
		}
		private bool GetDeviceInfo_bool(DeviceInfo paramName)
		{
			uint ret = default(uint);
			CheckError(CL.GetDeviceInfo<uint>(DeviceId, paramName, IntSizePtr, ref ret, (IntPtr*)NullPtr));
			return (Bool)ret == Bool.True;
		}
		private ulong GetDeviceInfo_size_t(DeviceInfo paramName)
		{
			if(AddressBits == 32) return (ulong)GetDeviceInfo_uint(paramName);
			else return GetDeviceInfo_ulong(paramName);
		}
		private string GetDeviceInfo_string(DeviceInfo paramName)
        {
            //get size
            uint parmSize;
            CheckError(CL.GetDeviceInfo(DeviceId, paramName, Null, Null, (IntPtr*)&parmSize));
            //get value
            byte[] value = new byte[parmSize];
            fixed (byte* valuePtr = value)
            {
                CheckError(CL.GetDeviceInfo(DeviceId, paramName, new IntPtr(&parmSize), new IntPtr(valuePtr), (IntPtr*)NullPtr));
            }
			return Encoding.ASCII.GetString(value).Trim('\0');
        }
		private static void CheckError(int err)
        {
			if ((ErrorCode)err != ErrorCode.Success)
			{
				throw new System.InvalidOperationException(string.Format(" ErrorCode:'{0}'", err));
			}
        }
		private static readonly void* NullPtr = IntPtr.Zero.ToPointer();
        private static readonly IntPtr Null = IntPtr.Zero;
		private static readonly IntPtr IntSizePtr = new IntPtr(sizeof(int));
		private static readonly IntPtr LongSizePtr = new IntPtr(sizeof(long));
	}
}
<#+
public List<Tuple<string, string, string>> parms = new List<Tuple<string, string, string>>();
public List<Tuple<string, string>> types = new List<Tuple<string, string>>();
public void AddParm(string name, string type)
{
	parms.Add(new Tuple<string, string, string>(name, type, type));
}
public void AddParm(string name, string type, string internalType)
{
	parms.Add(new Tuple<string, string, string>(name, type, internalType));
}
public void AddType(string openClName, string cSharpName)
{
	types.Add(new Tuple<string, string>(openClName, cSharpName));
}
public string GetPropName(string name)
{
	TextInfo textInfo = new CultureInfo("en-US",false).TextInfo;
	return textInfo.ToTitleCase(name.ToLower().Replace('_',' ')).Replace(" ","").Replace("ClDevice","");
}
public string GetTypeName(string type)
{
	foreach (var t in types)
	{
		type = type.Replace(t.Item1, t.Item2);
	}
	return type;
}
#>